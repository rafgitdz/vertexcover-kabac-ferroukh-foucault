.TH VertexCover 1 9/12/2011
.SH NAME
VertexCover \- Gets a vertex cover from a randomly generated graph, or from a formatted entry
.SH SYNOPSIS
.B VertexCover {[ -in
.I inputFile
.B ] | [ -g
.I graphType <args>
.B ]} [ -a
.I algorithm <args>
.B ]
.SH DESCRIPTION
This program, developed during an academic project at the university of bordeaux, returns a vertex cover of a generated (or given as input) graph, using one of the algorithms described below
.SH OPTIONS
.IP "-in path"
Loads a graph from a text file, where the graph is stored as an adjacency list (see the examples section for more details)
.IP "-g, --generate-graph"
Randomly generates a graph, using one of the algorithms, according to the first parameter:
.br
.br
.B 0 n p
: Generates a graph with n vertices, and a probability  p to draw an edge between two vertices (p must be between 0 and 100)
.br
.B 1 n p c
: Generates a graph with n vertices, a probability p to draw an edge between two vertices (p must be between 0 an 100), and with a vertex cover with c vertices
.br
.B 2 n p r
: Generates a bipartite graph with n vertices,a probability p to draw an edge between two vertices, and a ratio r between the two parts of a graph (p and r must be between 0 an 100)
.br
.B 3 n min max
: Generates a tree with n vertices, and where each vertex has between min and max sons
.br
.B 4 n p r c rc
: Generates a bipartite graph with n vertices,a probability p to draw an edge between two vertices, and a ratio r between the two parts of a graph (p and r must be between 0 an 100), size of the cover c and the ratio part of the cover rc between the two parts of the bipartit graph
.br
.IP "-a, --algorithm"
Launches an algorithm for the generated graph or input graph,according to the first parameter
.br 
.br
.B 0 
: Uses the greedy algorithm
.br
.B 1
: Uses the greedy simple algorithm
.br
.B 2
: Uses the 2-approached "cover edges" algorithm
.br
.B 3
: Uses the 2-approached algorithm based on a deep search tree
.br
.B 4
: Uses the optimal algorithm for bipartite graphs (for now, it can only be used with a generated graph)
.br
.B 5
: Uses the optimal algorithm for trees (for now, it can only be used with a generated tree)
.br
.B { 6 | 7 } s
: Uses the first | second recursive algoritm, which will try to find a cover with at most s vertices (you should avoid the use of this algorithm for large covers)
.br
.B 8
: Uses minisat to find a cover
.br 
.B 9 s
: Uses minisat to try to find a cover with at most s vertices (you should avoid the use of this algorithm for large covers)
.IP "-out path"
Saves the generated graph into a text file
.IP "-dot"
Generates a visual result of the vertex cover, as a png file (generated with dot)
.IP "-h, --help"
prints usage and exits
.IP "-t, --test"
Launches a serie of tests to ensure that each algorithm returns a vertex cover
.SH AUTHOR
Written by 
.IP
.B Milan Kabac - milan.kabac@etu.u-bordeaux1.fr
.br
.B Rafik Ferroukh - rafik.ferroukh@etu.u-bordeaux1.fr
.br
.B Matthieu Foucault - matthieu.foucault@etu.u-bordeaux1.fr
.br
.br
Masters Degrees at University of Bordeaux
.SH COPYRIGHT
Copyright (C) 2011  Milan Kabac, Rafik Ferroukh and Matthieu Foucault


This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
